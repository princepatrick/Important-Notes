The ELK Stack could be described as the combination of 3 technologies - ElasticSearch, Logstash, and Kibana. They allow to ingest, store, search, and visualize large amount of logs at the same time.

ElasticSearch:
	A highly scalable open-source search and analytics engine 
	
	What it does:
		Data storage and indexing:
			They are used to store the log data in a structured JSON based format and create indexes out of them. This allows for fast searches across huge datasets.
		
		Search and Analytics:
			Powerful search capabilities using a rich querly language like (DSL)
			It could handle both structured and unstructured data 
		
		Scalability and Distribution:
			Built to scale horizontally by distributing data - across multiple nodes, high availability, and performance.
	
	Common Use Cases:
		Storing logs, metrics, and time-series data, quick search and real time analytics.

Logstash:
	A robust data processing pipeline - ingests, transforms, and forwards data from various sources 
	
	What it does:
		Data collection:
			Collects data from various sources like logs, message queues, and databases
			
		Data transformation:
			It can perform various filters like Grok, mutate and date to process and enrich the data 
			For example it can convert the unstructured log messages into structured fields
		
		Data output:
			Sends the processed fields into destinations like ElasticSearch for storage and search analysis.
	
	Common use cases:
		Aggregate logs from various sources, cleaning up data, and transforming logs into a consistent structured format for analysis
		
Kibana:
	A data visualization and exploration tool designed to work with ElasticSearch
	
	What it does:
		Dashboarding and Visualization:
			It helps to build dashboards with graphs, charts, maps and tables to visualize data from elasticsearch kind of sources.
		
		Search and Analysis:
			Provides a way to query and search the logs in ElasticSearch. THey help you in providing queries and filters to the logs.			
		
		Real-time Monitoring:
			Helps track monitoring system performance, track events, and identify anomalies in real-time 
		
Comparisons with Splunk:	
	Splunk is a proprietory tool that helps to aggregate logs from various sources at the same time and create indexex into the logs.
	Then uses these indices to search in an optimal manner 
	Splunk also helps in monitoring or creating visualization from these indices 
	
		Why to prefer ELK over SPlunk
			Splunk is similar to ELK the only problem is that Splunk is expensive due to it being proprietory

Comparisons with Grafana/Prometheus Stack:
	Grafana/Prometheus are complementary set of tools that is used to handle the monitoring data or metric data (which is basically timestamp based data since metrics are collected with respect to timestamps).
	Prometheus is not suited to deal with logs kind of data, hence it is not suited to handle logging data. 
	
	The ELK stack with ElasticSearch and Logstash at the forefront is suited in processing logs while the Grafana/Prometheus stack helps in handling metrics.	
	
Comparisons with Grafana and Kibana:
	Both grafana aned kibana are tools used for visualization of data providing a User interface for querying and visualizing the data. 
	
	Why to prefer Kibana and when Grafana?
		The preference between kibana and grafana comes at the stack you are using. Kibana is well suited with ELK stack while grafana is compatible with any stack but is more suited with prometheus. Grafana can integrate with elasticsearch as well but it needs some well planned integration.

Questions:
	What does a rich query language mean by (DSL)
		A rich-query language is a tool that provides a domain specific language (DSL) that helps you to server more than a simple key-value lookup 
		Instead it helps in building queries and filters to create, manage and handle complex expressions
		
			ElasticSearch: A DSL helps in building multiple filters, specific aggregations, full-text searches, and manipulate scoring - using a single querying
			
			Prometheus: A query language PromQL helps you build filters, aggregate, and perform mathematical operations on time-seried data with a variety of functions.

ElasticSearch.yml content:
	# ======================== Elasticsearch Configuration =========================
	#
	# NOTE: Elasticsearch comes with reasonable defaults for most settings.
	#       Before you set out to tweak and tune the configuration, make sure you
	#       understand what are you trying to accomplish and the consequences.
	#
	# The primary way of configuring a node is via this file. This template lists
	# the most important settings you may want to configure for a production cluster.
	#
	# Please consult the documentation for further information on configuration options:
	# https://www.elastic.co/guide/en/elasticsearch/reference/index.html
	#
	# ---------------------------------- Cluster -----------------------------------
	#
	# Use a descriptive name for your cluster:
	#
	#cluster.name: my-application
	#
	# ------------------------------------ Node ------------------------------------
	#
	# Use a descriptive name for the node:
	#
	#node.name: node-1
	#
	# Add custom attributes to the node:
	#
	#node.attr.rack: r1
	#
	# ----------------------------------- Paths ------------------------------------
	#
	# Path to directory where to store the data (separate multiple locations by comma):
	#
	#path.data: /path/to/data
	#
	# Path to log files:
	#
	#path.logs: /path/to/logs
	#
	# ----------------------------------- Memory -----------------------------------
	#
	# Lock the memory on startup:
	#
	#bootstrap.memory_lock: true
	#
	# Make sure that the heap size is set to about half the memory available
	# on the system and that the owner of the process is allowed to use this
	# limit.
	#
	# Elasticsearch performs poorly when the system is swapping the memory.
	#
	# ---------------------------------- Network -----------------------------------
	#
	# By default Elasticsearch is only accessible on localhost. Set a different
	# address here to expose this node on the network:
	#
	#network.host: 192.168.0.1
	#
	# By default Elasticsearch listens for HTTP traffic on the first free port it
	# finds starting at 9200. Set a specific HTTP port here:
	#
	#http.port: 9200
	#
	# For more information, consult the network module documentation.
	#
	# --------------------------------- Discovery ----------------------------------
	#
	# Pass an initial list of hosts to perform discovery when this node is started:
	# The default list of hosts is ["127.0.0.1", "[::1]"]
	#
	#discovery.seed_hosts: ["host1", "host2"]
	#
	# Bootstrap the cluster using an initial set of master-eligible nodes:
	#
	#cluster.initial_master_nodes: ["node-1", "node-2"]
	#
	# For more information, consult the discovery and cluster formation module documentation.
	#
	# ---------------------------------- Various -----------------------------------
	#
	# Allow wildcard deletion of indices:
	#
	#action.destructive_requires_name: false
	
Kibana.yml Content:
	# For more configuration options see the configuration guide for Kibana in
	# https://www.elastic.co/guide/index.html

	# =================== System: Kibana Server ===================
	# Kibana is served by a back end server. This setting specifies the port to use.
	#server.port: 5601

	# Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.
	# The default is 'localhost', which usually means remote machines will not be able to connect.
	# To allow connections from remote users, set this parameter to a non-loopback address.
	#server.host: "localhost"

	# Enables you to specify a path to mount Kibana at if you are running behind a proxy.
	# Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath
	# from requests it receives, and to prevent a deprecation warning at startup.
	# This setting cannot end in a slash.
	#server.basePath: ""

	# Specifies whether Kibana should rewrite requests that are prefixed with
	# `server.basePath` or require that they are rewritten by your reverse proxy.
	# Defaults to `false`.
	#server.rewriteBasePath: false

	# Specifies the public URL at which Kibana is available for end users. If
	# `server.basePath` is configured this URL should end with the same basePath.
	#server.publicBaseUrl: ""

	# The maximum payload size in bytes for incoming server requests.
	#server.maxPayload: 1048576

	# The Kibana server's name. This is used for display purposes.
	#server.name: "your-hostname"

	# =================== System: Kibana Server (Optional) ===================
	# Enables SSL and paths to the PEM-format SSL certificate and SSL key files, respectively.
	# These settings enable SSL for outgoing requests from the Kibana server to the browser.
	#server.ssl.enabled: false
	#server.ssl.certificate: /path/to/your/server.crt
	#server.ssl.key: /path/to/your/server.key

	# =================== System: Elasticsearch ===================
	# The URLs of the Elasticsearch instances to use for all your queries.
	#elasticsearch.hosts: ["http://localhost:9200"]

	# If your Elasticsearch is protected with basic authentication, these settings provide
	# the username and password that the Kibana server uses to perform maintenance on the Kibana
	# index at startup. Your Kibana users still need to authenticate with Elasticsearch, which
	# is proxied through the Kibana server.
	#elasticsearch.username: "kibana_system"
	#elasticsearch.password: "pass"

	# Kibana can also authenticate to Elasticsearch via "service account tokens".
	# Service account tokens are Bearer style tokens that replace the traditional username/password based configuration.
	# Use this token instead of a username/password.
	# elasticsearch.serviceAccountToken: "my_token"

	# Time in milliseconds to wait for Elasticsearch to respond to pings. Defaults to the value of
	# the elasticsearch.requestTimeout setting.
	#elasticsearch.pingTimeout: 1500

	# Time in milliseconds to wait for responses from the back end or Elasticsearch. This value
	# must be a positive integer.
	#elasticsearch.requestTimeout: 30000

	# The maximum number of sockets that can be used for communications with elasticsearch.
	# Defaults to `800`.
	#elasticsearch.maxSockets: 1024

	# Specifies whether Kibana should use compression for communications with elasticsearch
	# Defaults to `false`.
	#elasticsearch.compression: false

	# List of Kibana client-side headers to send to Elasticsearch. To send *no* client-side
	# headers, set this value to [] (an empty list).
	#elasticsearch.requestHeadersWhitelist: [ authorization ]

	# Header names and values that are sent to Elasticsearch. Any custom headers cannot be overwritten
	# by client-side headers, regardless of the elasticsearch.requestHeadersWhitelist configuration.
	#elasticsearch.customHeaders: {}

	# Time in milliseconds for Elasticsearch to wait for responses from shards. Set to 0 to disable.
	#elasticsearch.shardTimeout: 30000

	# =================== System: Elasticsearch (Optional) ===================
	# These files are used to verify the identity of Kibana to Elasticsearch and are required when
	# xpack.security.http.ssl.client_authentication in Elasticsearch is set to required.
	#elasticsearch.ssl.certificate: /path/to/your/client.crt
	#elasticsearch.ssl.key: /path/to/your/client.key

	# Enables you to specify a path to the PEM file for the certificate
	# authority for your Elasticsearch instance.
	#elasticsearch.ssl.certificateAuthorities: [ "/path/to/your/CA.pem" ]

	# To disregard the validity of SSL certificates, change this setting's value to 'none'.
	#elasticsearch.ssl.verificationMode: full

	# =================== System: Logging ===================
	# Set the value of this setting to off to suppress all logging output, or to debug to log everything. Defaults to 'info'
	#logging.root.level: debug

	# Enables you to specify a file where Kibana stores log output.
	#logging.appenders.default:
	#  type: file
	#  fileName: /var/logs/kibana.log
	#  layout:
	#    type: json

	# Example with size based log rotation
	#logging.appenders.default:
	#  type: rolling-file
	#  fileName: /var/logs/kibana.log
	#  policy:
	#    type: size-limit
	#    size: 256mb
	#  strategy:
	#    type: numeric
	#    max: 10
	#  layout:
	#    type: json

	# Logs queries sent to Elasticsearch.
	#logging.loggers:
	#  - name: elasticsearch.query
	#    level: debug

	# Logs http responses.
	#logging.loggers:
	#  - name: http.server.response
	#    level: debug

	# Logs system usage information.
	#logging.loggers:
	#  - name: metrics.ops
	#    level: debug

	# Enables debug logging on the browser (dev console)
	#logging.browser.root:
	#  level: debug

	# =================== System: Other ===================
	# The path where Kibana stores persistent data not saved in Elasticsearch. Defaults to data
	#path.data: data

	# Specifies the path where Kibana creates the process ID file.
	#pid.file: /run/kibana/kibana.pid

	# Set the interval in milliseconds to sample system and process performance
	# metrics. Minimum is 100ms. Defaults to 5000ms.
	#ops.interval: 5000

	# Specifies locale to be used for all localizable strings, dates and number formats.
	# Supported languages are the following: English (default) "en", Chinese "zh-CN", Japanese "ja-JP", French "fr-FR".
	#i18n.locale: "en"

	# =================== Frequently used (Optional)===================

	# =================== Saved Objects: Migrations ===================
	# Saved object migrations run at startup. If you run into migration-related issues, you might need to adjust these settings.

	# The number of documents migrated at a time.
	# If Kibana can't start up or upgrade due to an Elasticsearch `circuit_breaking_exception`,
	# use a smaller batchSize value to reduce the memory pressure. Defaults to 1000 objects per batch.
	#migrations.batchSize: 1000

	# The maximum payload size for indexing batches of upgraded saved objects.
	# To avoid migrations failing due to a 413 Request Entity Too Large response from Elasticsearch.
	# This value should be lower than or equal to your Elasticsearch cluster’s `http.max_content_length`
	# configuration option. Default: 100mb
	#migrations.maxBatchSizeBytes: 100mb

	# The number of times to retry temporary migration failures. Increase the setting
	# if migrations fail frequently with a message such as `Unable to complete the [...] step after
	# 15 attempts, terminating`. Defaults to 15
	#migrations.retryAttempts: 15

	# =================== Search Autocomplete ===================
	# Time in milliseconds to wait for autocomplete suggestions from Elasticsearch.
	# This value must be a whole number greater than zero. Defaults to 1000ms
	#unifiedSearch.autocomplete.valueSuggestions.timeout: 1000

	# Maximum number of documents loaded by each shard to generate autocomplete suggestions.
	# This value must be a whole number greater than zero. Defaults to 100_000
	#unifiedSearch.autocomplete.valueSuggestions.terminateAfter: 100000


Setting up ElasticSearch:
	Steps and details: https://claude.ai/share/f9f5a61b-3ab1-45df-8f12-d0d800450f57
	ElasticSearch Architecture diagram: https://claude.ai/share/cfabc94c-9577-4c3c-aad7-81522c618dd8

Setting up Logstash:
	Steps and details: https://claude.ai/share/5c2f90eb-23fb-41e2-bfb3-39bb660cd251
	Logstash Basic Architecture: https://claude.ai/share/c8a23dea-f69d-402c-8dfb-ae2a97dda5da

	Future Questions:
		What is ECS
		What is ECS Compatibility
		How to configure ElasticSearch indexex 
		What is Elaticsearch index 
		How to check logstash for processing logs
		What is codec
		What is various filtering options like grok etc
		What is Hot Reloading, Persistent Queue, Dead letter queues 
		How does batch processing optimize throughput
		What is backpressure handling 
		Pipeline aggregators
	
Setting up Kibana:
	Steps and details: https://claude.ai/share/0865fb26-11be-4032-a554-d8dad3e39c77
	Kibana Architecture: https://claude.ai/share/13b474a2-8e21-493a-aac6-48735f486576

Integrating Spring Boot with Logstash:
	