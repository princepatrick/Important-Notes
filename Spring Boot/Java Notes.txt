
Java Top Concepts, Static, Interface, and Abstract Classes
https://chatgpt.com/share/67bd31d2-39f4-800b-8f3c-fd7a1daa925c

Some errors in Java:
	Code:
		public DomParserException( String message ){
			logger.error("We are facing errors at the DomParserException class with the error message " + message );
			super(message);
		}
		
		Error:
			The call to super() should be the first method in the constructor.
			Fix is to move the super(message) above the logger.error();			
			
Easy Concepts:
	Class
	Object
	Variable
	Primitive Data Types (e.g., int, double, boolean)
	Reference Data Types
	Method
	Constructor
	Single Inheritance
	Interface (Basic)
	Package
	Import Statement
	JDK (Java Development Kit)
	JRE (Java Runtime Environment)
	JVM (Java Virtual Machine)
	main() Method
	Comments (single-line and multi-line)
	String
	Array
	For Loop
	While Loop
	Do-While Loop
	if-else Statement
	Switch-case Statement
	Exception
	try-catch Block
	finally Block
	static Keyword
	final Keyword
	Access Modifiers (public, private, protected)
	Instance Variable
	Local Variable
	Method Overloading
	Method Overriding
	this Keyword
	super Keyword
	Encapsulation
	Abstraction
	Polymorphism
	Control Flow
	Typecasting (Basic Conversion)
	Basic Operators (arithmetic, logical, relational)
	Boolean Data Type
	char Data Type
	int Data Type
	double Data Type
	float Data Type
	short Data Type
	long Data Type
	Enum (Simple Enumeration)
	Literal Values
	
Medium:
	Exception Handling Mechanism (detailed understanding)
	Try-with-Resources Statement
	Garbage Collection Overview
	Autoboxing
	Unboxing
	Immutable Classes (e.g., String)
	String Pool Mechanism
	Collections Framework
	List Interface
	Set Interface
	Map Interface
	ArrayList Class
	LinkedList Class
	HashSet Class
	TreeSet Class
	HashMap Class
	TreeMap Class
	Iterator Interface
	Enhanced For Loop (for-each)
	Generics Basics
	Wildcards in Generics
	Lambda Expressions (Java 8)
	Functional Interfaces
	Streams API (Java 8)
	Method References
	Default Methods in Interfaces
	Static Methods in Interfaces
	Synchronized Keyword (basic thread safety)
	Synchronization (synchronized methods/blocks)
	Volatile Keyword
	Thread Class Basics
	Runnable Interface
	Multithreading Concepts
	Future Interface
	Callable Interface
	Executors Framework
	Reflection API (Basic Usage)
	ClassLoader Basics
	Serialization/Deserialization
	transient Keyword (serialization control)
	Overriding vs. Overloading (in-depth differences)
	Introductory Design Patterns (Singleton, Factory)
	JDBC (Java Database Connectivity)
	Java I/O Streams (InputStream/OutputStream)
	NIO Package (New I/O)
	Properties Class (configuration management)
	Java 8 Date and Time API (java.time)
	Regular Expressions (java.util.regex)
	Custom Exceptions (creating your own)
	Annotations (Basic Usage)

Hard:
	Multiple Inheritance via Interfaces (and its diamond problem)
	Explicit Typecasting (advanced casting between types)
	Advanced Generics (bounded type parameters, type erasure)
	Advanced Reflection (accessing private members)
	Dynamic Proxy Classes
	Annotation Processing (compile-time processing)
	Custom ClassLoaders
	JVM Memory Model (detailed internals)
	Garbage Collector Algorithms (G1, CMS, etc.)
	JIT Compilation (Just-In-Time compiler workings)
	Java Native Interface (JNI)
	Bytecode Manipulation (using ASM, Javassist)
	Java Module System (JPMS, introduced in Java 9)
	Java Memory Management (Heap vs. Stack, TLAB)
	ThreadLocal Storage (ThreadLocal class usage)
	Concurrency Utilities (java.util.concurrent package)
	Advanced Synchronization (ReentrantLock, ReadWriteLock)
	Atomic Variables (AtomicInteger, AtomicReference)
	Deadlock, Livelock, and Starvation (concurrency pitfalls)
	Fork/Join Framework
	CompletableFuture (advanced asynchronous programming)
	Reactive Programming (RxJava, Reactor)
	Method Handles (java.lang.invoke)
	Unsafe Operations (using sun.misc.Unsafe)
	Memory Leaks in Java Applications
	Finalization Mechanism (finalize() and Cleaners)
	Advanced Design Patterns (Observer, Strategy, Decorator)
	Custom Annotation Development
	Lambda Capture Pitfalls (scope and serialization issues)
	Serialization Proxy Pattern
	Enum Singleton Pattern
	Covariant Return Types (advanced overriding techniques)
	Reflection Performance Considerations
	Dynamic Class Loading at Runtime
	Advanced Network Programming (Asynchronous I/O, NIO.2)
	Remote Method Invocation (RMI)
	Aspect-Oriented Programming (AOP Concepts)
	JVM Tuning (performance optimization)
	Profiling and Benchmarking (using tools like JMH)
	Custom Thread Pool Implementation and Tuning
	Java Security Manager (custom security policies)
	Scripting API (JSR 223 integration)
	Class Metadata Analysis (advanced reflection use)
	Advanced Resource Management Patterns (try-with-resources deep dive)
	Concurrent Collections (e.g., ConcurrentHashMap)
	Memory Barriers and Happens-Before Relationships
	Class Versioning and Compatibility Issues
	Advanced Exception Handling Patterns (chained exceptions)
	HotSpot VM Internals
	Microbenchmarking Pitfalls in Java 
	
	
Java Questions Thread: https://claude.ai/share/eafbbfb4-3abf-4783-85c4-f5d44f29fa79
	JDK vs JRE vs JVM 
	Is Java platform independent. Exploring it and checking other languages on platform independence
	Checking how C/C++ is  deployed in real life
	How is portability of Java useful in real life 
	Compilers vs Interpretes based programming
	